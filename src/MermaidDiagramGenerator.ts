// src/MermaidDiagramGenerator.ts

/**
 * This module provides functionality for generating Mermaid class diagrams 
 * using an AI model within a VS Code extension. The `MermaidDiagramGenerator` 
 * class interacts with the AI model to create class diagrams based on input 
 * code prompts.
 * 
 * Key Features:
 * - Generates Mermaid class diagrams by sending prompts to the AI model.
 * - Formats generated diagrams to ensure compatibility with Mermaid syntax.
 * - Integrates with a logger for event tracking and debugging.
 */

import { injectable } from "inversify";
import { CoreLogger } from './logging/CoreLogger';
import { ChatModelFactory } from "./models/llm_models";

/**
 * The MermaidDiagramGenerator class is responsible for generating Mermaid 
 * class diagrams using an AI model. It interacts with the ChatGPT model to 
 * create meaningful and context-aware diagrams based on the provided code prompts.
 * 
 * Key Features:
 * - Generates Mermaid class diagrams by sending prompts to the AI model.
 * - Formats generated diagrams to ensure they adhere to Mermaid syntax.
 * - Integrates with a logger for event tracking and debugging.
 */
@injectable()
export class MermaidDiagramGenerator {
    private logger: CoreLogger = CoreLogger.getInstance();

    constructor() { }

    /**
     * Generates a Mermaid class diagram by interacting with the AI model.
     * This method sends a prompt to the AI model and waits for the generated 
     * diagram response, which is then formatted for compatibility with Mermaid.
     * 
     * @param prompt - The input code prompt for generating the class diagram.
     * @returns A promise that resolves with the generated Mermaid diagram.
     */
    public async generateDiagram(prompt: string): Promise<string> {
        this.logger.info("Generating Mermaid class diagram...");

        // Prepare the AI model
        const chatModel = await ChatModelFactory.createChatModel();
        this.logger.info('Chat model created successfully');

        if (!chatModel) {
            throw new Error("Failed to create chat model.");
        }

        let response = '';
        const updateResponse = (message: string) => {
            response += message;
        };

        // Send the prompt to the model and get the response
        const formattedDiagram = await chatModel.generate(prompt, '', updateResponse, 'mermaidDiagramGenerator');

        // Ensure the response starts with the Mermaid code block
        const mermaidDiagram = this.formatMermaidDiagram(formattedDiagram!);

        this.logger.info("Mermaid class diagram generated successfully.");

        return mermaidDiagram;
    }

    /**
     * Formats the generated diagram to ensure it adheres to Mermaid syntax.
     * Wraps the diagram in a Mermaid code block if not already formatted.
     * 
     * @param diagram - The raw diagram string generated by the AI model.
     * @returns The formatted Mermaid diagram string.
     */
    private formatMermaidDiagram(diagram: string): string {
        if (!diagram.startsWith("```mermaid")) {
            return `\`\`\`mermaid\n${diagram}\n\`\`\``;
        }
        return diagram;
    }
}
